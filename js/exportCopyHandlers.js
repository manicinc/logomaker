/**
 * exportCopyHandlers.js
 * Handles the Copy CSS and Copy HTML button functionality
 */

import SettingsManager from './settingsManager.js';
import { showToast, showAlert } from './notificationsDropInAlerts.js';

// Function to generate HTML code for the current logo
function generateHTMLCode() {
    const logoEl = document.querySelector('.logo-text');
    const containerEl = document.querySelector('.logo-container');
    
    if (!logoEl || !containerEl) {
        return '<!-- Error: Could not find logo elements -->';
    }
    
    // Get computed styles
    const logoComputedStyle = window.getComputedStyle(logoEl);
    const containerComputedStyle = window.getComputedStyle(containerEl);
    
    // Clone the elements to extract classes
    const logoClasses = Array.from(logoEl.classList).join(' ');
    const containerClasses = Array.from(containerEl.classList).join(' ');
    
    // Build HTML with inline styles
    let html = '<!-- Logo HTML Generated by Logomaker -->\n';
    html += '<div class="logo-container ' + containerClasses + '" style="';
    
    // Container styles
    html += 'position: relative; display: inline-flex; align-items: center; ';
    html += 'justify-content: ' + (containerComputedStyle.justifyContent || 'center') + '; ';
    html += 'padding: ' + (containerComputedStyle.padding || '16px') + '; ';
    html += 'border-radius: ' + (containerComputedStyle.borderRadius || '0') + '; ';
    
    if (containerComputedStyle.borderWidth !== '0px') {
        html += 'border-width: ' + containerComputedStyle.borderWidth + '; ';
        html += 'border-style: ' + containerComputedStyle.borderStyle + '; ';
        html += 'border-color: ' + containerComputedStyle.borderColor + '; ';
    }
    
    html += '">\n';
    
    // Logo text element
    html += '  <div class="logo-text ' + logoClasses + '" style="';
    
    // Text styles
    html += 'font-family: ' + logoComputedStyle.fontFamily + '; ';
    html += 'font-size: ' + logoComputedStyle.fontSize + '; ';
    html += 'font-weight: ' + logoComputedStyle.fontWeight + '; ';
    html += 'letter-spacing: ' + logoComputedStyle.letterSpacing + '; ';
    
    if (logoComputedStyle.transform !== 'none') {
        html += 'transform: ' + logoComputedStyle.transform + '; ';
    }
    
    if (logoComputedStyle.textTransform !== 'none') {
        html += 'text-transform: ' + logoComputedStyle.textTransform + '; ';
    }
    
    if (logoComputedStyle.fontStyle !== 'normal') {
        html += 'font-style: ' + logoComputedStyle.fontStyle + '; ';
    }
    
    if (logoComputedStyle.textDecorationLine !== 'none') {
        html += 'text-decoration-line: ' + logoComputedStyle.textDecorationLine + '; ';
        html += 'text-decoration-style: ' + logoComputedStyle.textDecorationStyle + '; ';
    }
    
    if (logoComputedStyle.backgroundImage !== 'none') {
        html += 'background-image: ' + logoComputedStyle.backgroundImage + '; ';
        html += 'background-clip: text; -webkit-background-clip: text; ';
        html += 'color: transparent; -webkit-text-fill-color: transparent; ';
    } else {
        html += 'color: ' + logoComputedStyle.color + '; ';
    }
    
    if (logoComputedStyle.textShadow !== 'none') {
        html += 'text-shadow: ' + logoComputedStyle.textShadow + '; ';
    }
    
    if (logoComputedStyle.opacity !== '1') {
        html += 'opacity: ' + logoComputedStyle.opacity + '; ';
    }
    
    html += 'line-height: 1.2; white-space: nowrap;';
    
    // Data attribute for effects that need it
    const needsDataAttr = logoEl.hasAttribute('data-text');
    const dataAttr = needsDataAttr ? ' data-text="' + logoEl.getAttribute('data-text') + '"' : '';
    
    html += '"' + dataAttr + '>' + logoEl.textContent + '</div>\n';
    html += '</div>\n';
    
    // Add animation keyframes if needed
    const animationClass = Array.from(logoEl.classList).find(cls => cls.startsWith('anim-') && cls !== 'anim-none');
    if (animationClass) {
        html += '\n<!-- Include this CSS for animation -->\n';
        html += '<style>\n';
        html += document.getElementById('cssCode').value;
        html += '\n</style>';
    }
    
    return html;
}

// Function to copy HTML to clipboard
function handleHTMLCopy() {
    const html = generateHTMLCode();
    navigator.clipboard.writeText(html)
        .then(() => {
            showToast({ message: 'HTML copied to clipboard! ✓', type: 'success' });
        })
        .catch(err => {
            console.error('Failed to copy HTML:', err);
            showAlert('Failed to copy HTML. Check browser permissions.', 'error');
        });
}

// Function to copy CSS to clipboard
function handleCSSCopy() {
    const css = document.getElementById('cssCode')?.value;
    if (!css) {
        showAlert('No CSS code available to copy.', 'error');
        return;
    }
    
    navigator.clipboard.writeText(css)
        .then(() => {
            showToast({ message: 'CSS copied to clipboard! ✓', type: 'success' });
        })
        .catch(err => {
            console.error('Failed to copy CSS:', err);
            showAlert('Failed to copy CSS. Check browser permissions.', 'error');
        });
}

// Initialize the handlers when DOM is loaded
function initExportCopyHandlers() {
    // Find and attach handlers to buttons
    const copyHtmlBtn = document.getElementById('copyHtmlBtn');
    const copyCssBtn = document.getElementById('copyCssBtn');
    const copyGeneratedCSS = document.getElementById('copyGeneratedCSS');
    const exportGeneratedCSS = document.getElementById('exportGeneratedCSS');
    
    if (copyHtmlBtn) {
        copyHtmlBtn.addEventListener('click', handleHTMLCopy);
        console.log('[ExportCopy] HTML copy button handler attached');
    }
    
    if (copyCssBtn) {
        copyCssBtn.addEventListener('click', handleCSSCopy);
        console.log('[ExportCopy] CSS copy button handler attached');
    }
    
    // Handle the advanced tab buttons too
    if (copyGeneratedCSS) {
        copyGeneratedCSS.addEventListener('click', function() {
            const generatedCSS = document.getElementById('cssCode').textContent;
            navigator.clipboard.writeText(generatedCSS)
                .then(() => {
                    const btn = this;
                    const originalText = btn.innerHTML;
                    btn.innerHTML = '<i class="icon-check"></i> Copied!';
                    setTimeout(() => { btn.innerHTML = originalText; }, 2000);
                    showToast({ message: 'CSS copied to clipboard! ✓', type: 'success' });
                })
                .catch(err => {
                    console.error('Failed to copy CSS:', err);
                    showAlert('Failed to copy CSS. Check browser permissions.', 'error');
                });
        });
    }
    
    if (exportGeneratedCSS) {
        exportGeneratedCSS.addEventListener('click', function() {
            const generatedCSS = document.getElementById('cssCode').textContent;
            const blob = new Blob([generatedCSS], {type: 'text/css'});
            const url = URL.createObjectURL(blob);
            
            const a = document.createElement('a');
            a.href = url;
            a.download = 'logomaker-styles.css';
            document.body.appendChild(a);
            a.click();
            
            setTimeout(() => {
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
            }, 100);
            
            showToast({ message: 'CSS file downloaded! ✓', type: 'success' });
        });
    }
}

// Expose these functions globally so they can be called from other modules if needed
window.handleHTMLCopy = handleHTMLCopy;
window.handleCSSCopy = handleCSSCopy;

// Set up initialization
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initExportCopyHandlers);
} else {
    initExportCopyHandlers();
}

export { handleHTMLCopy, handleCSSCopy };